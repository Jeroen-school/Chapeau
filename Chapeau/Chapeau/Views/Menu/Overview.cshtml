@model Chapeau.Models.Order;
@using Chapeau.Models.Enums;
@using Chapeau.Models;


@{
    ViewData["Title"] = $"Table {@Model.Table.TableNr} order overview";
}

<partial name="_ErrorMessage" />
<partial name="_ConfirmMessage" />

<div class="Menu">
    <!-- Simple Navigation -->
    <div class="overview-nav">
        <a asp-controller="Menu" asp-action="Card" asp-route-tableNr="@Model.Table.TableNr">
            Back to menu
        </a>
    </div>

    <!-- Main Order Items Card -->
    <div class="order-items-container">
        <div class="order-items-header">
            <div class="header-left">
                <h1>Table @Model.Table.TableNr</h1>
                <div class="order-meta">
                    <span class="order-time">@Model.Time_ordered.ToString("HH:mm")</span>
                    <span class="waiter-name">@Model.Employee.FirstName</span>
                    <span class="time-elapsed">@Model.MinutesSinceOrdered min ago</span>
                </div>
            </div>
            <div class="items-count">@Model.OrderItems.Sum(i => i.Count) items</div>
        </div>

        <div class="course-group">
            <div class="course-header order-category-drink">
                <h3>Drinks</h3>
            </div>
            <div class="course-header order-category-starter">
                <h3>Starters</h3>
            </div>
            <div class="course-header order-category-entrement">
                <h3>Entrements</h3>
            </div>
            <div class="course-header order-category-main">
                <h3>Mains</h3>
            </div>
            <div class="course-header order-category-dessert">
                <h3>Desserts</h3>
            </div>


            @foreach (OrderItem orderItem in Model.OrderItems)
            {
                string rowStyle = "";

                //Display the list using flexbox and the flex property order, used for ordering
                if (orderItem.MenuItem.MenuCard == MenuCard.Drinks)
                {
                    rowStyle = "order-item-drink";
                }
                else
                {
                    switch (orderItem.MenuItem.CourseCategory)
                    {
                        case CourseCategory.Starters:
                            rowStyle = "order-item-starter";
                            break;

                        case CourseCategory.Entrements:
                            rowStyle = "order-item-entrement";
                            break;

                        case CourseCategory.Mains:
                            rowStyle = "order-item-main";
                            break;

                        case CourseCategory.Desserts:
                            rowStyle = "order-item-dessert";
                            break;
                    }
                }

                <div class="order-item @rowStyle">
                    @if (@orderItem.Status == Status.Unordered)
                    {
                        <form action="/Menu/DeleteOrderItem" method="post">
                            <input type="hidden" name="orderItemId" value="@orderItem.OrderItemId" />
                            <input type="hidden" name="tableNr" value="@Model.Table.TableNr" />
                            <input type="hidden" name="orderId" value="@Model.OrderId" />

                            <button type="submit" class="btn btn-danger delete-button">
                                <i class="bi bi-trash"></i>
                            </button>
                        </form>
                    }

                    <div>
                        <div class="item-quantity">@orderItem.Count</div>
                    </div>
                    <div class="item-details">
                        <div class="item-name">@orderItem.MenuItem.Name</div>
                        @if (!string.IsNullOrEmpty(orderItem.Comment))
                        {
                            <div class="item-comment">@orderItem.Comment</div>
                        }
                    </div>
                    <div class="item-status">
                        <span class="status-badge">@orderItem.Status</span>
                    </div>
                    <div class="item-price">€@orderItem.TotalCost</div>

                    @if (@orderItem.Status == Status.Unordered || @orderItem.Status == Status.Ordered)
                    {
                        <a class="btn btn-primary shadow-button" asp-controller="Menu" asp-action="EditOrderItem" asp-route-orderItemId="@orderItem.OrderItemId" asp-route-tableNr="@Model.Table.TableNr">
                            Edit
                        </a>
                    }
                </div>
            }
        </div>

        <!-- Action Buttons -->
        <div class="order-actions">
            <form action="/Menu/SendOrder" method="post">
                <input type="hidden" name="tableNr" value="@Model.Table.TableNr" />
                <input type="hidden" name="orderId" value="@Model.OrderId" />
                <button type="submit" class="action-btn success">
                    Send to Kitchen
                </button>
            </form>

            <a class="action-btn primary" asp-controller="Payment" asp-action="Index" asp-route-orderId="@Model.OrderId">
                Go to Payment
            </a>

            <a class="action-btn secondary" asp-controller="Menu" asp-action="Card" asp-route-tableNr="@Model.Table.TableNr">
                Add More Items
            </a>
            <form action="/Menu/CancelUnsentOrder" method="post">
                <input type="hidden" name="tableNr" value="@Model.Table.TableNr" />
                <input type="hidden" name="orderId" value="@Model.OrderId" />
                <button type="submit" class="action-btn danger">
                    Cancel Order
                </button>
            </form>
        </div>
    </div>
</div>