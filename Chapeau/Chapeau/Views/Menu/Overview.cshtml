@model Chapeau.Models.Order;
@using Chapeau.Models.Enums;
@using Chapeau.Models;


@{
    ViewData["Title"] = $"Table {@Model.Table.TableNr} order overview";
}

<partial name="_ErrorMessage" />
<partial name="_ConfirmMessage" />

<div class="Menu">
    <!-- Simple Navigation -->
    <div class="overview-nav">
        <a asp-controller="Menu" asp-action="Card" asp-route-tableNr="@Model.Table.TableNr">
            Back to menu
        </a>
    </div>

    <!-- Main Order Items Card -->
    <div class="order-items-container">
        <div class="order-items-header">
            <div class="header-left">
                <h1>Table @Model.Table.TableNr</h1>
                <div class="order-meta">
                    <span class="order-time">@Model.Time_ordered.ToString("HH:mm")</span>
                    <span class="waiter-name">@Model.Employee.FirstName</span>
                    <span class="time-elapsed">@Model.MinutesSinceOrdered min ago</span>
                </div>
            </div>
            <div class="items-count">@Model.OrderItems.Sum(i => i.Count) items</div>
        </div>

        @foreach (var OrderItem in Model.OrderItems)
        {
            /*
            //TODO: display this list using flexbox and the flex property order
            if(OrderItem.MenuItem.MenuCard == MenuCard.Drinks)
            {


            } else
            {
            switch (OrderItem.MenuItem.CourseCategory)
            {
            case CourseCategory.Starters:
            break;

            case CourseCategory.Entrements:
            break;

            case CourseCategory.Mains:
            break;

            case CourseCategory.Desserts:
            break;
            }
            }
            */
        }
        @foreach (var group in Model.OrderItems.GroupBy(i => i.MenuItem.CourseCategory))
        {

            <div class="course-group">
                <div class="course-header">
                    <h3>@group.Key</h3>
                    <div class="course-status">
                        @{
                            var groupStatus = GetGroupStatus(group);
                            var statusClass = GetStatusClass(groupStatus);
                            var statusText = groupStatus.ToString();
                        }
                        <span class="status-indicator @statusClass"></span>
                        <span class="status-text @statusClass">@statusText</span>
                    </div>
                </div>
                <div class="course-items">
                    @foreach (OrderItem item in group)
                    {
                        <div class="order-item">
                            @if(@item.Status == Status.Unordered){
                                    <form action="/Menu/DeleteOrderItem" method="post">
                                        <input type="hidden" name="OrderItemId" value="@item.OrderItemId" />
                                        <input type="hidden" name="TableNr" value="@Model.Table.TableNr" />

                                        <button type="submit" class="btn btn-danger shadow-button">
                                            Delete
                                        </button>
                                    </form>
                            }
                            <div>
                                <div class="item-quantity">@item.Count</div>
                            </div>
                            <div class="item-details">
                                <div class="item-name">@item.MenuItem.Name</div>
                                @if (!string.IsNullOrEmpty(item.Comment))
                                {
                                    <div class="item-comment">@item.Comment</div>
                                }
                            </div>
                            <div class="item-status">
                                <span class="status-badge @GetStatusClass(item.Status)">@item.Status</span>
                            </div>
                            <div class="item-price">€@((item.MenuItem.Price * item.Count).ToString("F2"))</div>

                            <a class="btn btn-primary shadow-button" asp-controller="Menu" asp-action="EditOrderItem" asp-route-orderItemId="@item.OrderItemId" asp-route-tableNr="@Model.Table.TableNr">
                                Edit
                            </a>
                        </div>
                    }
                </div>
            </div>

        }


        <!-- Action Buttons -->
        <div class="order-actions">
            <form action="/Menu/SendOrder" method="post">
                <input type="hidden" name="tableNr" value="@Model.Table.TableNr" />
                <input type="hidden" name="orderId" value="@Model.OrderId" />
                <button type="submit" class="action-btn success">
                    Send to Kitchen
                </button>
            </form>

            <a class="action-btn primary" asp-controller="Payment" asp-action="Index" asp-route-orderId="@Model.OrderId">
                Go to Payment
            </a>

            <a class="action-btn secondary" asp-controller="Menu" asp-action="Card" asp-route-tableNr="@Model.Table.TableNr">
                Add More Items
            </a>
            <form action="/Menu/DeleteUnsentOrderItems" method="post">
                <input type="hidden" name="tableNr" value="@Model.Table.TableNr" />
                <input type="hidden" name="orderId" value="@Model.OrderId" />
                <button type="submit" class="action-btn danger">
                    Cancel Order
                </button>
            </form>
        </div>
    </div>

    @functions {
        string GetStatusClass(Status status)
        {
            return status switch
            {
                Status.Unordered => "unordered",
                Status.Ordered => "ordered",
                Status.Preparing => "preparing",
                Status.Ready => "ready",
                Status.Served => "served",
                Status.Completed => "completed",
                Status.Cancelled => "cancelled",
                _ => "unknown"
            };
        }

        Status GetGroupStatus(IEnumerable<OrderItem> items)
        {
            var statuses = items.Select(x => x.Status).Distinct().ToList();

            // If all items have the same status, return that status
            if (statuses.Count == 1)
                return statuses.First();

            // Otherwise, return the most advanced status
            var statusOrder = new[] { Status.Unordered, Status.Ordered, Status.Preparing, Status.Ready, Status.Served, Status.Completed };
            return statuses.Where(s => statusOrder.Contains(s)).OrderBy(s => Array.IndexOf(statusOrder, s)).LastOrDefault();
        }
    }
</div>


<div class="modal fade" id="editOrderItem" tabindex="-1" aria-labelledby="editOrderItemLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title w-100 text-center" id="editOrderItemLabel">Split by</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="d-flex justify-content-center gap-4">
                    <form action="/Menu/EditOrderItem" method="post">
                        <input type="hidden" name="OrderItemId" />

                        <div class="mb-3">
                            <label for="Count" class="form-label">Count</label>
                            <input type="number" min="0" id="Count" name="Count" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label for="Comment" class="form-label">Notes</label>
                            <input type="text" id="Comment" name="Comment" class="form-control" required />
                        </div>

                        <input type="hidden" name="Status" class="form-control" />

                        <div class="d-flex justify-content-center mt-4">
                            <button type="submit" class="btn btn-primary shadow-button">
                                <i class="fas fa-save me-2"></i> Save Changes
                            </button>
                        </div>

                        <input type="hidden" value="@Model.Table.TableNr" />
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

    @section Scripts {
    <script src="~/js/orderOverview.js"></script>
    }
